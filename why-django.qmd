---
title: "Why Django"
description: |
  Web frameworks are designed to support building a web frontend as well
  as the API layer. Django is a popular and widely used framework.
date: "2023-03-22"
categories:
  - api
  - web
  - frontend
  - software-architecture
---

<!--TODO #35 docs: Update 'Why Django' with Benefits and Drawbacks -->

::: content-hidden
Use other decision posts as inspiration to writing these. Leave the
content-hidden sections in the text for future reference.
:::

## Context and Problem Statement

::: content-hidden
State the context and some background on the issue, then write a
statement in the form of a question for the problem.
:::

For a software project to succeed it is important to pick the right
programming framework to work in from the start. A framework should
provide consistency, code reuse, and easy of maintenance for a group of
developers. It should provide best practice, and allow for code to be
shared between different parts of the applications. The question
therefore becomes:

> Which coding framework will best suit our needs in developing
> Seedcase?

## Decision Drivers

::: content-hidden
List some reasons for why we need to make this decision and what things
have arisen that impact work.
:::

All considered web frameworks use Python. For our decision to use
Python, see the page [Why Python](why-python.qmd).

## Considered Options

::: content-hidden
List and describe some of the options, as well as some of the benefits
and drawbacks for each option.
:::

### Django

[Django](https://www.djangoproject.com) provides excellent support for
API development through its built-in serialization framework and REST
framework. The REST framework provides a lot of functionality out of the
box, such as authentication, pagination, and filtering. Additionally,
Django provides good support for other types of APIs, such as GraphQL.

Django provides a powerful ORM that abstracts away much of the database
logic and allows developers to work with database models in a Pythonic
way. It provides good support for migrations, which makes it easy to
evolve the database schema over time. Django also provides a built-in
admin interface that allows non-technical users to manage data.

Django provides good support for security through its built-in
authentication system and its support for common security practices such
as Cross-Site Request Forgery (CSRF) protection and password hashing. It
also provides good support for role-based access control and
fine-grained permissions.

Django provides good support for user management through its built-in
authentication system and its support for user profiles and social
authentication. It also provides good support for password resets and
account activation.


::: {.columns}
::: {.column}
#### Benefits

- Item 1
:::
::: {.column}
#### Drawbacks

- Item 1
:::
:::

### Flask

[Flask](https://flask.palletsprojects.com/en/2.3.x/) is a lightweight
web framework that is easy to use and has a low learning curve. It
provides a lot of flexibility and does not enforce any particular
project structure. Flask has a small footprint and is a good option for
simple web applications or prototypes.

However, Flask does not provide some of the advanced features that
Django has, such as an admin interface, an object-relational mapper
(ORM), and a built-in authentication system. These features would need
to be implemented manually or by using third-party libraries.


::: {.columns}
::: {.column}
#### Benefits

- Item 1
:::
::: {.column}
#### Drawbacks

- Item 1
:::
:::

### FastAPI

[FastAPI](https://fastapi.tiangolo.com) is a modern, high-performance
web framework for building APIs with Python. It is designed to be fast,
and easy to use. FastAPI includes features like automatic validation of
request bodies, async support, and built-in OpenAPI documentation. These
features make it a popular choice for building scalable and maintainable
APIs, especially for applications that require high performance
real-time responses.

However, it's important to consider the specific needs of the Seedcase
Product. FastAPI may be a good choice for applications that require high
performance real-time responses, but not as good a choice for more
complex web applications that require a full-stack framework with many
built-in features. It is also newer, so it is still maturing and has a
small, though active, community, which limits the amount of available
support and resources.


::: {.columns}
::: {.column}
#### Benefits

- Item 1
:::
::: {.column}
#### Drawbacks

- Item 1
:::
:::

## Decision Outcome

::: content-hidden
What decision was made, use the form "We decided on CHOICE because of
REASONS."
:::

After evaluating Flask, FastAPI, Ruby on Rails, and Django, we have made
the decision that Django is the better fit for Seedcase. Django has the
benefits of a built-in serialization framework and REST framework for
API development, providing a powerful ORM and good built-in support for
security, as well as user management.
