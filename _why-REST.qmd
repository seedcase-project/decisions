---
title: "Why RESTful API"
description: |
  REST is a widely used design style for developing APIs.
date: "2023-03-22"
draft: true
categories:
  - api
  - software-architecture
---
<!--TODO #41 docs: Update 'Why REST' with decision drivers, options for REST and Decision -->

::: content-hidden
Use other decision posts as inspiration to writing these. Leave the
content-hidden sections in the text for future reference.
:::

## Context and Problem Statement

::: content-hidden
State the context and some background on the issue, then write a
statement in the form of a question for the problem.
:::

Application programming interfaces (APIs) are ways that applications
communicate to each other through a standard structure or design. It is
important for a project like Seedcase to chose an API format early on,
bearing in mind both what will work best for the application but also
which resources there are available within the team. The question the
becomes:

> Which API technology will best serve the needs of the Seedcase
> project?

## Decision Drivers

::: content-hidden
List some reasons for why we need to make this decision and what things
have arisen that impact work.
:::

<!--TODO docs: Write decision drivers for Why REST-->

## Considered Options

::: content-hidden
List and describe some of the options, as well as some of the benefits
and drawbacks for each option.
:::

There are several design styles available for building APIs, including
Representational State Transfer (REST), Simple Object Access Protocol
(SOAP), and GraphQL. We have looked at REST, SOAP, and GraphQL as
possible API tech for Seedcase.

### REST

<!--TODO docs: complete considered option for REST in Why REST-->

::: columns
::: column
#### Benefits

-   Is lightweight and easy to implement, making it a popular choice for
    web-based applications
-   Uses a simple and intuitive set of HTTP methods, which makes it easy
    for developers to understand and use
-   Provides a clear separation of responsibilities between the client
    and server components, making it easier to develop, test, and deploy
    each component independently
-   Follows a conceptually simple and traditional approach where the
    client sends a request to the server, and the server responds with
    the requested data
-   Is often simpler to implement and offers better caching mechanisms.
-   Has better tooling support and is more widely adopted

:::

::: column
#### Drawbacks

<!--TODO docs: Write drawbacks for REST in Why REST-->

-   Item 1
:::
:::

### SOAP

[SOAP](https://www.w3.org/TR/soap12-part0/) is a widely used technology
for implementing web services. SOAP is based on the XML protocol and
supports a wide range of messaging formats, such as binary and MIME
types, making it quite flexible.

::: columns
::: column
#### Benefits

-   Based on XML 
-   Supports a number of messaging formats making it flexible
:::

::: column
#### Drawbacks

-   Complex to implement
-   Requires additional metadata and processing overhead
    -   can result in slower performance and higher resource consumption
-   Difficult to debug and test due to its complexity and lack of visibility in the underlying communication logs
:::
:::

### GraphQL

[GraphQL](https://graphql.org) is an increasingly popular technology for
building web APIs. GraphQL allows for very fine-grained control over
what data is requested and given, so it offers the most flexibility. GraphQL can be integrated with REST API, which is a
useful feature especially when handling large and/or complex requests.
So if needed, we could incorporate GraphQL into existing REST API.

::: columns
::: column
#### Benefits

-   Control over what is transmitted i very detailed
-   Flexible
-   Can be integrated into REST API
:::

::: column
#### Drawbacks

-   Complex to set up and maintain
:::
:::

## Decision Outcome

::: content-hidden
What decision was made, use the form "We decided on CHOICE because of
REASONS."
:::

We believe that the simplicity, flexibility, and scalability of REST
make it a better choice for the client-server communication needs of
Seedcase.

### Consequences

::: content-hidden
List some potential consequences of this decision.
:::
