---
title: "Why use Polars for data cleaning?"
description: "Key to all data storage is good data quality. This is often overlooked as it can be labour intensive, but it is essential for good data analysis. This post explains why we chose to use Polars for data cleaning."
date: "2024-12-04"
categories:
- data cleaning
- pre-processing data
---

::: content-hidden
Use other decision posts as inspiration to writing these. Leave the
content-hidden sections in the text for future reference.
:::

## Context and problem statement

::: content-hidden
State the context and some background on the issue, then write a
statement in the form of a question for the problem.
:::

When working with data analysis, data is rarely ready to be used 'as
is'. There will always be things that are either very wrong (like text
in what should be a number field), or slightly wrong (like a single
missing value, or an outlier, which may or may not be a data entry
error). In Sprout we are not worried about the single missing values or
the outliers, but we are concerned with the data that contradicts the
definition of the resource (eg. TBC in a date field). There are a lot of
tools that can be used to both analyse a data set, and to clean it,
either as part of the analysis, or as part of the initial check before
the data is transformed and stored. The checking of the data prior to
inclusion into Sprout is done within Sprout itself, this work will
result in a list of errors which the user will need to handle before
they can load the data into Sprout.

> Which tool should we use for cleaning and processing data before
> loading it into Sprout?

## Decision drivers

::: content-hidden
List some reasons for why we need to make this decision and what things
have arisen that impact work.
:::

-   We need a tool that can clean data and is easy to integrate with our
    current workflow.
-   We want to use an established tool that is well supported.
-   We want a tool which users will find easy to learn and use.
-   We do not want to build a tool from scratch.

## Considered options

::: content-hidden
List and describe some of the options, as well as some of the benefits
and drawbacks for each option.
:::

There are a number of tools available to use for data cleaning, but as
we want something which will run in python, and which is well supported,
we have narrowed our options down to the following:

-   [DuckDB](https://www.duckdb.org/)
-   [Pandas](https://pandas.pydata.org/)
-   [Polars](https://pola.rs/)

### DuckDB

DuckDB is as the name implies not a Python library, but an in-process
OLAP database solution. It is a very young tool, version 1.0.0 was
released in 2024, although the first version was released in 2019. The
developers have set it up as a not-for-profit foundation in the
Netherlands.

::: columns
::: column
#### Benefits

-   Although a very young project it is already in use by a number of
    large companies and has a large community of users.
    -   The code is open source, and the way it has been set up is
        promising for it to remain that way.
-   It is very fast, and can handle large data sets.
:::

::: column
#### Drawbacks

-   It is not designed to be used as a data cleaning tool, but as a
    database.
:::
:::

### Polars

The Polars project started in 2020 and is based in the Netherlands.
Relatively small team but seems to have a fast growing user base, and
very enthusiastic developers. Polars is written in Rust and available
for Python. It is designed to be faster than Pandas, and to handle all
common data formats. The two main developers are described as
enthusiastic about open source, which makes it a potentially good choice
for us.

::: columns
::: column
#### Benefits

-   Enthusiastic user community, with a lot of support available.
-   Supports several languages, including Python.
-   Handles all common data formats.
-   Faster than Pandas.
:::

::: column
#### Drawbacks

-   Relatively young project, so may not have all the features of more
    established tools.
-   Not as well known as Pandas, but certainly getting there.
-   Compared with Pandas there aren't as many online courses available.
:::
:::

### Pandas

Pandas was initially released in 2008, and is now a well established
tool to work with data frames in Python. The tool is well supported, and
has a large user base. It is also well documented, and there are a lot
of online courses available for users to learn how to use it. The tool
is written in Python, and is designed to be easy to use, and to work
with large data sets. The main critique is that it can be slow when
working with large data sets.

::: columns
::: column
#### Benefits

-   Established tool with a large user base.
-   Well supported, and well documented.
-   Works with all relevant languages and data formats.
:::

::: column
#### Drawbacks

-   Can be slow when working with large data sets.
-   May see itself overtaken by newer tools in future.
:::
:::

## Decision outcome

::: content-hidden
What decision was made, use the form "We decided on CHOICE because of
REASONS."
:::

We have decided to use Polars for data cleaning, as it is a fast and well documented, and we expect that we may use it elsewhere in the project. It is also a relatively new tool, but it is already well supported with an enthusiastic following, which we expect will continue in future. Our second choice would be Pandas, not because DuckDB isn't a good tool (we may use it elsewhere in the project), but because it is not designed to be used as a data cleaning tool.

### Consequences

::: content-hidden
List some potential consequences of this decision.
:::

We don't expect that we will find any problems with this decision down the line, but as always it is something that we will review on a regular basis. If we find that Polars is not meeting our needs, we will look at other tools that are available.

## Resources used for this post

::: content-hidden
List the resources used to write this post
:::

-   [DuckDB wikipage](https://en.wikipedia.org/wiki/DuckDB)

-   [DuckBD website](https://www.duckdb.org/)

-   [Pandas wikipage](https://en.wikipedia.org/wiki/Pandas_(software))

-   [Pandas website](https://pandas.pydata.org/)

-   [Polars website](https://pola.rs/)

-   [DuckDB study](https://github.com/prrao87/duckdb-study) speed
    comparison between DuckDB, Pandas and Polars.
